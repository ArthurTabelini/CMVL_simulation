import numpy as np
import random
import pandas as pd


def extract_context(cont):
    
    i = 0
    
    while cont[i] == None:
        
        i += 1
       
    return cont[i:]


def context_row(cont, mat_cont):
    
    m = len(mat_cont[:, 0])

    n = len(cont)
    
    # Starts by the last row

    for j in range(m - 1, -1, -1):
        
        aux = extract_context(mat_cont[j, :])
        
        k = len(aux)
        
        # Tests if the context corresponds to a certain row
        
        if (aux == cont[n - k:]).all(): # with cont[n - k:], it gets the last k elements 
            
            # Returns the row number
            return j
                
    
mat_cont = np.array([[0,0,0], [1,0,0], [2,0,0], [None,1,0], [None,2,0], [None,0,1], [None,1,1], [None,2,1], [None,None,2]])

cont = np.array([2,1])

print(context_row(cont, mat_cont))


def next_state(P, cont, mat_cont, chain, i, unif_array):
    
    n_states = len(P[0])
    
    # Gets row number
    j = context_row(cont, mat_cont)
    
    u = np.random.uniform()
    
    unif_array[i] = u 
    
    # Uses inverse transform sampling to compute
    # the next state
    if u < P[j, 0]:
        
        chain[i] = 0
        
    else:
    
        for k in range(1, n_states):
        
            if np.sum(P[j, 0:k]) <= u < np.sum(P[j, 0:k + 1]):
            
                chain[i] = k
                
                # Breaks the loop so it doesn't run unecessary
                # tests in the above if statement
                break
                


def simulate_CMVL(n, P, cont, mat_cont):
    
    # Length of the initial context
    k1 = len(cont)
    
    # Initiates chain array
    chain = np.empty(n)
    
    chain[:] = np.NaN
    
    # Initiates array of the uniforms
    unif_array = np.empty(n)
    
    unif_array[:] = np.NaN
    
    # Greatest length of a context
    l = len(mat_cont[0, :])
    
    # Adds the initial context to the chain array
    chain[:k1] = cont
    
    for  i in range(k1, n):
        
        # Case in which the current length of the chain is less
        # than the greatest length of a context
        if i + 1 < l:
            
            # Gets the relevant part of the chain
            cont = chain[:i]
            
            # Computes the next state of the chain inside the function,
            # but doesn't return anything
            next_state(P, cont, mat_cont, chain, i, unif_array)
            
        else:
            
            # Gets the last "l" elements of the chain
            cont = chain[i - l:i]
            
            next_state(P, cont, mat_cont, chain, i, unif_array)
            
            
            
    return chain, unif_array


mat_cont = np.array([[0,0], [1,0], [2,0], [0,1], [1, 1], [2,1], [None,2]])

P = np.array([[0,0,1], [0,0,1], [0.2,0.8,0], [0,0,1], [0,0,1], [0.2,0.8,0], [0.2,0.8,0]])

n = 100

cont = np.array([0, 1])

chain, unif_array = simulate_CMVL(n, P, cont, mat_cont)

chain

sum(chain == np.ones(n))

sum(chain == np.zeros(n))


def print_table(chain, unif_array):
    
    pd.set_option("display.max_rows", None, "display.max_columns", None)

    df = pd.DataFrame([chain, unif_array])

    df = df.transpose()

    return df


print_table(chain, unif_array)


# Now, an example with more contexts.

mat_cont = np.array([[0,0,0], [1,0,0], [2,0,0], [None,1,0], [None,2,0], [None,0,1], [None,1,1], [None,2,1], [None,None,2]])

P = np.array([[0.4, 0.2, 0.4], [0.6, 0, 0.4], [0.2, 0.4, 0.4], [0.3, 0.65, 0.05], [0,0.6,0.4], [0.2,0.8,0], [1,0,0], [0,0,1], [0.2,0.8,0]])

n = 100

cont = np.array([0, 0, 0])

chain, unif_array = simulate_CMVL(n, P, cont, mat_cont)

print_table(chain, unif_array)

